" Vundle {
call vundle#begin()
  " all vundle plugins here
  " plugin formats: user/repo for GitHub
  "                 name for plugin from vim-scripts.org/vim/scripts.html
  "                 git://host/repo.git for repos not on github
  " Dependencies:
  "   vimproc: cd ~/.vim/bundle/vimproc && make
  "   YouCompleteMe: cd ~/.vim/bundle/YouCompleteMe && ./install.py
  "   ctags: brew install ctags or apt-get install ctags
  "   ack: make ack in dotfiles/bin/ack available in the path
  Plugin 'VundleVim/Vundle.vim'                       " the package manager

  " colors pls
  Plugin 'daylerees/colour-schemes', {'rtp': 'vim/'}
  Plugin 'altercation/vim-colors-solarized'
  Plugin 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
  Plugin 'sonph/onehalf', {'rtp': 'vim/'}

  " airline status bar
  Plugin 'vim-airline/vim-airline'                    " the modern status bar; thanks for flying vim!
  Plugin 'vim-airline/vim-airline-themes'             " airline themes; solarized included

  Plugin 'vim-scripts/Tabmerge'

  " navigate
  Plugin 'christoomey/vim-tmux-navigator'             " navigate tmux panes and vim windows using the same key combs
  Plugin 'scrooloose/nerdtree'                        " file browser sidebar
  " Plugin 'jistr/vim-nerdtree-tabs'                    " sync nerdtrees between tabs
  Plugin 'airblade/vim-gitgutter'                     " show git changes in the gutter (besides line numbers)
  Plugin 'luochen1990/rainbow'                        " different colors for parentheses at different nested levels
  if executable('ctags')
    Plugin 'majutsushi/tagbar'                        " outline/tags sidebar
  endif
  Plugin 'kshenoy/vim-signature'
  Plugin 'rargo/vim-tab'
  Plugin 'easymotion/vim-easymotion'

  " search & autocomplete
  " Plugin 'ctrlpvim/ctrlp.vim'                         " file fuzzy search; unite does it just fine so no need
  Plugin 'Shougo/unite.vim'                           " fuzzy search for files, buffers, commands, etc.
  Plugin 'Shougo/neomru.vim'                          " unite plugin: most recently used files (enable file_mru source)
  Plugin 'Shougo/vimproc.vim'                         " unite plugin: index files asynchronously (enable file_rec/async)
  Plugin 'Valloric/YouCompleteMe'                     " lightweight autocomplete engine
  " Fix YCM load errors due to Python:
  " https://github.com/Valloric/YouCompleteMe/issues/18
  " https://github.com/Valloric/YouCompleteMe/issues/1605
  if executable('ack-grep')                           " ack code search; better version of grep
    let g:ackprg="ack-grep -H --nocolor --nogroup --column"
    Plugin 'mileszs/ack.vim'
  elseif executable('ack')
    Plugin 'mileszs/ack.vim'
  endif

  " editing
  Plugin 'sjl/gundo.vim'
  Plugin 'mattn/emmet-vim'
  Plugin 'terryma/vim-multiple-cursors'               " sublime-style multiple cursors
  Plugin 'sonph/auto-pairs'                           " auto-pairs fork; automatically pair parentheses, quotes, etc.
  Plugin 'scrooloose/nerdcommenter'                   " plugin for commenting

" all vundle plugins must be before this line
call vundle#end()
" }

" Plugin settings {

" vim-airline
" let g:airline_theme='solarized'
let g:airline_theme='bubblegum'                   " see https://github.com/vim-airline/vim-airline/wiki/Screenshots
set laststatus=2                                  " load airline even on a single split
set noshowmode                                    " disable default mode indicator, use airline's instead
let g:airline#extensions#tabline#left_sep=' '
let g:airline#extensions#tabline#left_alt_sep='|'
let g:airline_left_sep=''
let g:airline_right_sep=''

" NERDTree
nmap <leader>nt :NERDTreeToggle<CR>                     " ^w 0 to focus the nerdtree sidebar (like sublime)
"let NERDTreeShowHidden=1                          " show hidden dot files
"if has('autocmd')
"  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"                                                  " automatically close vim if the only tab open is nerdtree
"  autocmd StdinReadPre * let s:std_in=1           " open nerdtree automatically if no file is specified
"  autocmd VimEnter * if (argc() == 0 && !exists("s:std_in")) | NERDTree | wincmd l | endif
"endif

" Tagbar
nmap <leader>tb :TagbarToggle<CR>

" Rainbow
let g:rainbow_active = 1                          " enable by default (can also use :RainbowToggle)
" change ctermfgs to set colors; original colors are bright
let g:rainbow_conf = {
    \   'guifgs': ['black', 'blue', 'red', 'green'],
    \   'ctermfgs': ['black', 'blue', 'red', 'green'],
    \}

" Vim-signature
" change the bookmark color to indicate git-gutter state
let g:SignatureMarkTextHLDynamic=1

" for some reason the bookmarks don't immediately appear, call SignatureRefresh
let bookmark_keys = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
let i = 0
while i < len(bookmark_keys)
  execute 'nnoremap m' . bookmark_keys[i] . ' :mark ' . bookmark_keys[i]. ' \| SignatureRefresh<CR>'
  let i = i + 1
endwhile

" vim-signature
nnoremap m/ :SignatureListMarks<CR>
nnoremap m<Space> call signature#mark#Purge('all')

" vim-tab
let g:TabTrigger = []

" Unite
" nnoremap <leader>p :Unite -start-insert file_mru file file_rec/async<CR>
nnoremap <leader>p :Unite -start-insert -no-split -smartcase file_rec/async<CR>
" if has("nvim")
"   nnoremap <leader>p :Unite -start-insert -smartcase file_rec/neovim<CR>
" endif
nnoremap <leader>P :Unite -start-insert -no-split -smartcase command<CR>
vnoremap <leader>P :Unite -start-insert -no-split -smartcase command<CR>
nnoremap <leader>/ :Unite -start-insert -no-split -smartcase line<CR>

" the default command is find -L, which follows symbolic links
let g:unite_source_rec_async_command = ['find']

" call unite#filters#matcher_default#use(['matcher_fuzzy'])
autocmd FileType unite call s:unite_user_settings()
function! s:unite_user_settings()"{{{
  nmap <buffer> <leader>p <Plug>(unite_exit)
  nmap <buffer> <leader>q <Plug>(unite_exit)
endfunction"}}}

let g:multi_cursor_quit_key='<C-c>'
"nnoremap <leader>m :call multiple_cursors#quit()<CR>
"nnoremap <leader>c :call multiple_cursors#quit()<CR>
let g:multi_cursor_exit_from_insert_mode=0


" Gundo
nnoremap <leader>gd :GundoToggle<CR>
" for configuration options, see http://sjl.bitbucket.org/gundo.vim/
" open gundo on the right side instead of the left
let g:gundo_right=1
" automatically close gundo on reverting
let g:gundo_close_on_revert=1

" Emmet
" enable only for html/css
let g:user_emmet_install_global=0
autocmd FileType html,css EmmetInstall
" use <Tab> to trigger expanding abbreviation
let g:user_emmet_expandabbr_key='<Tab>'
" }

" NERDCommenter
" Add an extra space after the comment sign.
let NERDSpaceDelims=1
