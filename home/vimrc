" disable backward compatibility with vi
set nocompatible

filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

" General settings {

" File encoding: utf-8
if !has('nvim')
  set encoding=utf-8
endif
set fileencoding=utf-8
set ffs=unix,dos,mac

" Line wrapping

" disable automatic hard line wrapping
" see http://vim.wikia.com/wiki/Word_wrap_without_line_breaks
set textwidth=0
set wrapmargin=0
                                                  " http://vim.wikia.com/wiki/Automatic_word_wrapping
set nowrap                                        " no soft wrapping either
set nojoinspaces                                  " prevent 2 consecutive spaces after punctuation on a join (J)
set whichwrap=b,s,h,l,<,>,[,]                     " also wrap these keys: backspace, navigational

" Search
set ignorecase                                    " ignore case when searching
set smartcase                                     " SMART CASE: case-sensitive if the search term has a uppercased char
set hlsearch                                      " highlight search terms
set incsearch                                     " show search matches as you type

" Undo, backup, swap, history
set history=1000                                  " remember more commands and search history
set undolevels=1000                               " more undos

set nobackup                                      " don't use backup or swap files
set noswapfile

" Indentation settings
set expandtab
set shiftwidth=2
set tabstop=2
set smarttab                                      " insert tabs on the start of a line according to shiftwidth,
                                                  " not tabstop
set smartindent                                   " smart indent (does the right thing, most of the time)
set backspace=indent,eol,start                    " allow backspace to also delete autoindents and newlines

" Line numbering and highlight
set number                                        " show line numbers
try                                               " set color columns to mark 80 and 120 character limits
  set colorcolumn=80,120
catch
  set colorcolumn=120                             " if 2 color columns are not supported
endtry

set cursorline                                    " highlight current line
" only highlight current line for active window
" see http://vim.wikia.com/wiki/Highlight_current_line
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END


" Highlighting
syntax on                                         " syntax highlighting pls
set showmatch                                     " show matching parentheses
set list                                          " highlight trailing spaces
set listchars=tab:›·,trail:·,extends:›,precedes:‹

" Cursor and mouse
set ttyfast                                       " enable mouse support
set mouse=a                                       " see http://usevim.com/2012/05/16/mouse/

if !has('nvim')                                   " nvim doesn't have ttymouse. Mouse support is enabled by default
  set ttymouse=xterm2                             " set this to name of your terminal that supports mouse codes:
endif                                             " xterm, xterm2, netterm, dec, jsbterm, pterm

" change cursor shapes according to current mode
" only works in iTerm. tmux optional.
" see http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes
if !empty($TMUX)
  " inside a tmux session
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  " not inside a tmux session
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif


" Windows, buffers
set splitbelow                                    " open new split windows to the right and bottom
set splitright

set switchbuf=usetab,newtab                       " see http://vim.wikia.com/wiki/Using_tab_pages


" Other
set lazyredraw                                    " don't redraw while executing macros
set wildmenu                                      " show list instead of just autocompleting commands
set scrolloff=8                                   " minimum lines to keep above and below cursor
set nofoldenable                                  " disable code folding
set nospell                                       " disable spell checking
set timeoutlen=1000 ttimeoutlen=0                 " eliminate delay after pressing Esc or ^c to return to normal mode
                                                  " see https://www.johnhawthorn.com/2012/09/vi-escape-delays/
set noerrorbells visualbell t_vb=                 " no bell sounds
autocmd GUIEnter * set visualbell t_vb=

set autoread                                      " automatically reload file when changed from outside

cmap w!! w !sudo tee % > /dev/null                " w!! to save file with sudo

" remember last file edit position
" see
" http://askubuntu.com/questions/202075/how-do-i-get-vim-to-remember-the-line-i-was-on-when-i-reopen-a-file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
" }

" autoload sessions
" see http://vim.wikia.com/wiki/Go_away_and_come_back
" Creates a session
let g:sessionfile_name = "session.vim"
function! MakeSession()
  let g:sessionfile = getcwd() . "/" . g:sessionfile_name
  exec 'mksession! ' . fnameescape(g:sessionfile)
  echo 'Wrote session ' . g:sessionfile
endfunction

" Updates a session, only if it exists
function! UpdateSession()
  if (filereadable(g:sessionfile))
    exec 'mksession! ' . fnameescape(g:sessionfile)
    echo 'Updating session ' . g:sessionfile
  endif
endfunction

" Loads a session if it exists
function! LoadSession()
  " only load session if vim is not invoked with any arguments
  if (argc() == 0)
    " try to load directory session
    let g:sessionfile = getcwd() . "/" . g:sessionfile_name
    if (filereadable(g:sessionfile))
      exec 'source ' . fnameescape(g:sessionfile)
      echo 'Loaded ' . g:sessionfile
    else
      " try to load default session in ~
      let g:sessionfile = $HOME . "/" . g:sessionfile_name
      if (filereadable(g:sessionfile))
        exec 'source ' . fnameescape(g:sessionfile)
        echo 'Loaded ' . g:sessionfile
      else
        echo 'No session loaded.'
      endif
    endif
  else
    let g:sessionfile = ""
    let g:sessiondir = ""
  endif
endfunction
au VimEnter * nested :call LoadSession()
au VimLeave * :call UpdateSession() | NERDTreeClose
command! MakeSession call MakeSession()

" Language specific settings {
if has('autocmd')
  " don't show tabs in html and xml files
  autocmd filetype html,xml set listchars-=tab:›·
  autocmd filetype python set shiftwidth=2 tabstop=2
endif
" }

" Keymap {
if filereadable(expand('~/.vimrc.keymap'))
  source ~/.vimrc.keymap
endif
" }

" Plugins {
if filereadable(expand('~/.vimrc.plugins'))
  source ~/.vimrc.plugins
endif
" }

" Google specific rc {
if filereadable(expand('~/.vimrc.google'))
  source ~/.vimrc.google
endif
" }

" Gvim {
if has('gui_running') && has('macunix')
endif
" }

" Tabline {
if exists("+showtabline")
" Rename tabs to show tab number.
" (Based on http://stackoverflow.com/questions/5927952/whats-implementation-of-vims-default-tabline-function)
function! MyTabLine()
  let s = '  '
  let t = tabpagenr()
  let i = 1
  while i <= tabpagenr('$')
    let buflist = tabpagebuflist(i)
    let winnr = tabpagewinnr(i)
    let s .= '%' . i . 'T'
    let s .= (i == t ? '%1*' : '%2*')

    " let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
    " let s .= ' '
    let s .= (i == t ? '%#TabNumSel#' : '%#TabNum#')
    "let s .= ' ' . i . ' '
    let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')

    let bufnr = buflist[winnr - 1]
    let file = bufname(bufnr)
    let buftype = getbufvar(bufnr, '&buftype')

    if buftype == 'help'
      let file = 'help:' . fnamemodify(file, ':t:r')

    elseif buftype == 'quickfix'
      let file = 'quickfix'

    elseif buftype == 'nofile'
      if file =~ '\/.'
        let file = substitute(file, '.*\/\ze.', '', '')
      endif

    else
      let file = pathshorten(fnamemodify(file, ':p:~:.'))
      if getbufvar(bufnr, '&modified')
        let file = '+' . file
      endif

    endif

    if file == ''
      let file = '[No Name]'
    endif

    let s .= '  ' . file

    let nwins = tabpagewinnr(i, '$')
    if nwins > 1
      let modified = ''
      for b in buflist
        if getbufvar(b, '&modified') && b != bufnr
          let modified = '*'
          break
        endif
      endfor
      let hl = (i == t ? '%#WinNumSel#' : '%#WinNum#')
      let nohl = (i == t ? '%#TabLineSel#' : '%#TabLine#')
      "let s .= ' ' . modified . '(' . hl . winnr . nohl . '/' . nwins . ')'
      let s .= ' ' . modified . '(' . winnr . '/' . nwins . ')'
    endif

    let s .= '  '

    if i < tabpagenr('$')
      let s .= ' %#TabLine#  '
    else
      let s .= '  '
    endif

    let i = i + 1

  endwhile

  let s .= '%T%#TabLineFill#%='
  let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
  return s

endfunction
" set showtabline=1
"hi TabNum term=None cterm=None ctermfg=1 ctermbg=7 gui=None guibg=LightGrey
"hi TabNumSel term=None cterm=None ctermfg=1 ctermbg=7 gui=None
"hi WinNum term=None cterm=None ctermfg=11 ctermbg=7 guifg=DarkBlue guibg=LightGrey
"hi WinNumSel term=None cterm=None ctermfg=7 ctermbg=14 guifg=DarkBlue guibg=LightGrey
set tabline=%!MyTabLine()
endif " exists("+showtabline")
" }

" Custom commands {
function! ToggleBackground_()
  let s:tbg = &background
  if s:tbg == 'dark'
    set background=light
  else
    set background=dark
  endif
endfunction
command! ToggleBackground call ToggleBackground_()
command! ToggleSpellCheck set spell!
command! TogglePaste set paste!
command! ToggleWordWrap set wrap!
command! ToggleLineNumber set number!
command! Resource source ~/.vimrc
command! TabsToSpaces retab

function! DeleteTrailingWs_()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunction
command! DeleteTrailingWs call DeleteTrailingWs_()
command! SetSyntaxPlainText set syntax=off
command! SetSyntaxHTML set syntax=html
command! OpenURL call feedkeys('gx')
command! SetIndent4Spaces set shiftwidth=4 tabstop=4 softtabstop=4
command! SetIndent2Spaces set shiftwidth=2 tabstop=2 softtabstop=2

" }

" Colors {
set t_Co=256                                      " enable 256 colors

function! ColorLight_()
  colorscheme onehalflight
  let g:airline_theme='onedark'
  set background=light
endfunction
function! ColorDark_()
  colorscheme onedark
  let g:airline_theme='onedark'
  set background=dark
endfunction
function! ColorSolarized_()
  colorscheme solarized
  set background=light
  let g:airline_theme='solarized'
endfunction
function! ColorSolarizedDark_()
  call ColorSolarized_()
  set background=dark
endfunction
command! ColorSolarized call ColorSolarized_()
command! ColorSolarizedDark call ColorSolarizedDark_()
command! ColorLight call ColorLight_()
command! ColorDark call ColorDark_()

" Neovim {
if filereadable(expand('~/.vimrc.neovim')) && has('nvim')
  source ~/.vimrc.neovim
endif
" }

" default colors
ColorLight
" }


" make sure this is the last line
filetype plugin indent on

