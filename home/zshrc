# ------------------------------------------------
# General
# ------------------------------------------------

# Profiling utils. Set to 'true' to enable.
local ENABLE_PROFILING=''
[ $ENABLE_PROFILING ] && local START_TIME=$(($(date +%s%N) / 1000000))

ZSH_DIR="$HOME/.zsh"

autoload -U compinit bashcompinit promptinit colors

# Directory containing zsh completion scripts.
# See https://github.com/zsh-users/zsh-completions/tree/master/src
# This line must be before compinit.
fpath=($fpath "$ZSH_DIR/completion")

# Paths.
typeset -U path
path=($HOME/bin $path)
path=(/usr/local/bin $path)

# Enable hash-comments at end of line while in REPL mode.
# This enables us to "tag" a command then later do a reverse search (^R) for it.
setopt interactivecomments

compinit
bashcompinit
promptinit
colors

# History file.
if [ -z "$HISTFILE" ]; then
    HISTFILE="$ZSH_DIR/history"
fi

HISTSIZE=100000
SAVEHIST=100000

case $HIST_STAMPS in
  "mm/dd/yyyy") alias history='fc -fl 1' ;;
  "dd.mm.yyyy") alias history='fc -El 1' ;;
  "yyyy-mm-dd") alias history='fc -il 1' ;;
  *) alias history='fc -l 1' ;;
esac

setopt append_history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt inc_append_history
setopt share_history

setopt noclobber

# Enable arrow keys in autocomplete menu.
zstyle ':completion:*' menu select

# Use a built in prompt.
# For list of built in prompt styles, run `prompt -l`.
# Note `prompt` requires `autoload -U promptinit && promptinit`.
# prompt walters

# Left and right prompts (left prompt has a leading newline).
local RED='%{$fg[red]%}'
local GREEN='%{$fg[green]%}'
local BLUE='%{$fg[blue]%}'
local CYAN='%{$fg[cyan]%}'
local MAGENTA='%{$fg[magenta]%}'
local RESET='%{$reset_color%}'
if [[ "$(whoami)" = 'root' ]]; then
  PROMPT="
$RED%n$RESET $BLUE%2~$RESET $RED%#$RESET "
else
  PROMPT="
$BLUE%2~$RESET $GREEN%#$RESET "
fi
RPROMPT="$GREEN\$(echo -n \$ZBELL_DURATION)$RESET $RED%(?..[%?])$RESET$MAGENTA\$(__git_ps1 ' [%s]')$RESET$GREEN [%m]"


# ------------------------------------------------
# Key mappings
# ------------------------------------------------
# -e for emacs, -v for vim.
bindkey -e

# Fix broken backspace key on some keyboards.
# stty erase ^H

# ^P/^N to go up/down in local history.
# ^R searches in the global shared history.
up-line-or-local-history() {
  zle set-local-history 1
  zle up-line-or-history
  zle set-local-history 0
}
zle -N up-line-or-local-history
down-line-or-local-history() {
  zle set-local-history 1
  zle down-line-or-history
  zle set-local-history 0
}
zle -N down-line-or-local-history
bindkey '^P' up-line-or-local-history
bindkey '^N' down-line-or-local-history


# ------------------------------------------------
# Misc
# ------------------------------------------------

# Colored man pages with less.
man() {
  env LESS_TERMCAP_mb=$'\E[01;31m' \
  LESS_TERMCAP_md=$'\E[01;38;5;74m' \
  LESS_TERMCAP_me=$'\E[0m' \
  LESS_TERMCAP_se=$'\E[0m' \
  LESS_TERMCAP_so=$'\E[38;5;246m' \
  LESS_TERMCAP_ue=$'\E[0m' \
  LESS_TERMCAP_us=$'\E[04;38;5;146m' \
  man "$@"
}


# ------------------------------------------------
# Plugins
# ------------------------------------------------
# Syntax highlighting for interactive commands.
source $ZSH_DIR/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md
# for documentation.
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[path]="fg=blue"
ZSH_HIGHLIGHT_STYLES[path_prefix]="fg=blue"
ZSH_HIGHLIGHT_STYLES[path_approx]="fg=blue"
ZSH_HIGHLIGHT_STYLES[reserved-word]="fg=magenta"
ZSH_HIGHLIGHT_STYLES[command]="fg=green"
ZSH_HIGHLIGHT_STYLES[builtin]="fg=yellow"
ZSH_HIGHLIGHT_STYLES[precommand]="fg=yellow"
ZSH_HIGHLIGHT_STYLES[alias]="fg=yellow"
ZSH_HIGHLIGHT_STYLES[function]="fg=yellow"
ZSH_HIGHLIGHT_STYLES[unknown-token]="fg=red"
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]="fg=green"
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]="fg=green"

# `bd` to go back to a specific parent directory instead of `cd ../../../..`.
# See github.com/Tarrasch/zsh-bd
source $ZSH_DIR/bd.zsh

# Autocomplete words from other tmux panes.
# See https://blog.plenz.com/2012-01/zsh-complete-words-from-tmux-pane.html
# Usage: ^V for prefix completion and ^V^V for fuzzy completion.
source $ZSH_DIR/tmux_pane_words.zsh

# z to jump around quickly. See github.com/rupa/z
source $ZSH_DIR/z/z.sh

# Press Enter on an empty buffer (no command) triggers the clear command.
source $ZSH_DIR/enter-to-clear.zsh

source $ZSH_DIR/bell.zsh

# Git status indicator in prompt.
# See wiki.archlinux.org/index.php/Git#Git_Prompt.
setopt PROMPT_SUBST  # Enable substitution in prompt.
source $ZSH_DIR/git-prompt.zsh
export GIT_PS1_SHOWDIRTYSTATE=" "       # show */+ for unstaged/staged changes
export GIT_PS1_SHOWSTASHSTATE=" "       # show $ if something is stashed
export GIT_PS1_SHOWUNTRACKEDFILES=" "   # show % if there are untracked files
export GIT_PS1_SHOWUPSTREAM="auto"      # show </>/<> to indicate behind/ahead/diverged w/ upstream

source $HOME/.shexports
source $HOME/.shaliases
[[ -e $HOME/.zshrc.local ]] && source $HOME/.zshrc.local

# Multi keyword reverse search
# https://github.com/zdharma/history-search-multi-word
if [[ -e $ZSH_DIR/history-search-multi-word/history-search-multi-word.plugin.zsh ]]; then
  source $ZSH_DIR/history-search-multi-word/history-search-multi-word.plugin.zsh
else
  >&2 echo "Failed to source zsh plugin history-search-multi-word. Make sure submodules are initialized"
fi


export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" --no-use # This loads nvm

if [ $ENABLE_PROFILING ]; then
  local END_TIME=$(($(date +%s%N) / 1000000))
  echo $(($END_TIME - $START_TIME))
fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME/.files/google-cloud-sdk/path.zsh.inc" ]; then source "$HOME/.files/google-cloud-sdk/path.zsh.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "$HOME/.files/google-cloud-sdk/completion.zsh.inc" ]; then source "$HOME/.files/google-cloud-sdk/completion.zsh.inc"; fi

# Docker-machine: if there is one active running docker-machine, then set the
# environment variables for docker. Docker-machine commands are pretty slow
# so we cache the content in a /tmp file.
if [[ "$(uname)" == "Darwin" ]]; then
  ZSHRC_DOCKER_MACHINE_ENV_CACHE='/tmp/ZSHRC_DOCKER_MACHINE_ENV_CACHE'
  if [ -e "$ZSHRC_DOCKER_MACHINE_ENV_CACHE" ]; then
    eval "$(cat $ZSHRC_DOCKER_MACHINE_ENV_CACHE)"
  elif command -v docker-machine 2>&1 > /dev/null \
      && [ "$(docker-machine ls | grep -i 'Running' | wc -l)" -ge 1 ]; then
        docker-machine env > "$ZSHRC_DOCKER_MACHINE_ENV_CACHE"
        eval "$(cat $ZSHRC_DOCKER_MACHINE_ENV_CACHE)"
  fi
fi

# Added by travis gem
[ -f "$HOME/.travis/travis.sh" ] && source "$HOME/.travis/travis.sh"
